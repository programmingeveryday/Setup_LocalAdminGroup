#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 25287d33-b436-4c77-92d0-08fef9ae1249
# Source File: C:\Users\his10625-admin\Documents\SAPIEN\PowerShell Studio\Projects\Setup_LocalAdminGroup\Setup_LocalAdminGroup.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.164
     Generated on:       7/1/2019 1:21 PM
     Generated by:       HIS10625-Admin
     Organization:       Thomas IT Services
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2019
#>



#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}


#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
	function Add-ComputerAdministratorsGroupMember
	{
		[CmdletBinding(DefaultParameterSetName = 'Main',
					   SupportsShouldProcess = $true,
					   PositionalBinding = $false,
					   ConfirmImpact = 'Medium')]
		[Alias()]
		[OutputType([String])]
		Param
		(
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   Position = 0,
					   ParameterSetName = 'Main')]
			[string]$ComputerName,
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   Position = 1,
					   ParameterSetName = 'Main')]
			[string]$UserName
		)
		
		Process
		{
			
			
			$adComputer = Try
			{
				$ComputerDomainName = "hke.local"
				Get-ADComputer -Identity $ComputerName -ErrorAction Stop -Server $ComputerDomainName
				
			}
			catch
			{
				try
				{
					$ComputerDomainName = "hmf.hke.local"
					Get-ADComputer -Identity $ComputerName -ErrorAction Stop -Server $ComputerDomainName
				}
				catch
				{
					$_; return
				}
			}
			if ($adComputer.Name)
			{
				 $("Found Computer AD Account: {0}`n" -f $adComputer.Name)
			}
			
			$adUser = try
			{
				$UserDomainName = "hke.local"
				Get-ADUser -Identity $UserName -ErrorAction Stop -Server $UserDomainName
			}
			catch
			{
				try
				{
					$UserDomainName = "hmf.hke.local"
					Get-ADUser -Identity $UserName -ErrorAction Stop -Server $UserDomainName
				}
				catch
				{
					$_; return
				}
			}
			
			if ($adUser.Name)
			{
				 $("Found User AD Account: {0}`n" -f $adUser.Name)
			}
			
			
			$CBU = $adComputer.DistinguishedName.Split(",")[-4]
			
			
			$ExemptOU = try
			{
				(Get-ADOrganizationalUnit -Filter 'Name -like "Exempt"' -ErrorAction Stop -Server $ComputerDomainName |
					Where-Object { $_.DistinguishedName -like "*$CBU*" }).DistinguishedName
			}
			catch { $_ }
			
			$localComputerAdminGroup = "{0} Administrators" -f $adComputer.Name
			
			$exemptADGroup = try
			{
				Get-ADGroup $localComputerAdminGroup -ErrorAction Stop -Server $ComputerDomainName
			}
			catch
			{
				try
				{
					New-ADGroup -Name $localComputerAdminGroup -GroupScope DomainLocal -Path $ExemptOU -ErrorAction Stop -Server $ComputerDomainName
					Get-ADGroup $localComputerAdminGroup -ErrorAction Stop -Server $ComputerDomainName
				}
				catch { $_ }
			}
			
			try
			{
				$enableGPOGroup = Get-ADGroup -Identity 'Enable GPO - HKE Local Admin - Computer' -Server $ComputerDomainName -ErrorAction Stop
				try
				{
					if (!($enableGPOGroup | Get-ADGroupMember | Where-Object{$_.name -eq $adComputer.name}))
					{
						$enableGPOGroup | Add-ADGroupMember -Server $ComputerDomainName -Members $adComputer -ErrorAction Stop
						$("Added: {0} to `"{1}`"`n" -f $adComputer.name, $enableGPOGroup.name )
					}
					
				}catch{$_}
			}
			catch { $_ }
			
			$addedExemptADGroupMember = if ($adUser | Get-Member | Where-Object{ $_.TypeName -eq "Microsoft.ActiveDirectory.Management.ADUser" })
			{
				
				try
				{
					$groupMemebrs = $exemptADGroup | Get-ADGroupMember -ErrorAction Stop -Server $ComputerDomainName
					try
					{
						if (!($groupMemebrs | Where-Object{ $_.SamAccountName -eq $adUser.SamAccountName }))
						{
							$exemptADGroup | Add-ADGroupMember -Members $adUser -ErrorAction Stop -Server $ComputerDomainName					
							$exemptADGroup | Get-ADGroupMember -ErrorAction Stop -Server $ComputerDomainName
						}
						else { $groupMemebrs }
					}
					catch { $_ }
				}
				catch { $_ }
			}
			if ($exemptADGroup.Name)
			{
				 $("Administators Group Name: `"{0}`" setup in {1}`n" -f $exemptADGroup.Name, $ExemptOU)
			}
			else { $exemptADGroup }
			
			if ($addedExemptADGroupMember | Get-Member | Where-Object{ $_.TypeName -eq "Microsoft.ActiveDirectory.Management.ADPrincipal" })
			{
				
				$addedExemptADGroupMember.name | ForEach-Object{
					 $("{0} is a member of `"{1}`"`n" -f $_, $exemptADGroup.Name)
				}
			}
			else
			{
				 $("Issue Adding: {0} to membership of `"{1}`"`n" -f $adUser.Name, $exemptADGroup.Name)
			}
		}
	}
	
	
	function Remove-ComputerAdministratorsGroupMember
	{
		[CmdletBinding(DefaultParameterSetName = 'Main',
					   SupportsShouldProcess = $true,
					   ConfirmImpact = 'Medium')]
		[Alias()]
		[OutputType([String])]
		Param
		(
			# Param1 help description
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   Position = 0,
					   ParameterSetName = 'Main')]
			[string]$ComputerName,
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   Position = 1,
					   ParameterSetName = 'Main')]
			[string]$UserName
		)
		
		Process
		{
			
			
			$adComputer = Try
			{
				$ComputerDomainName = "hke.local"
				Get-ADComputer -Identity $ComputerName -ErrorAction Stop -Server $ComputerDomainName
				
			}
			catch
			{
				try
				{
					$ComputerDomainName = "hmf.hke.local"
					Get-ADComputer -Identity $ComputerName -ErrorAction Stop -Server $ComputerDomainName
				}
				catch
				{
					$_; return
				}
			}
			if ($adComputer.Name)
			{
				 $("Found Computer AD Account: {0}`n" -f $adComputer.Name)
			}
			
			$adUser = try
			{
				$UserDomainName = "hke.local"
				Get-ADUser -Identity $UserName -ErrorAction Stop -Server $UserDomainName
			}
			catch
			{
				try
				{
					$UserDomainName = "hmf.hke.local"
					Get-ADUser -Identity $UserName -ErrorAction Stop -Server $UserDomainName
				}
				catch
				{
					$_; return
				}
			}
			
			if ($adUser.Name)
			{
				 $("Found User AD Account: {0}`n" -f $adUser.Name)
			}
			$CBU = $adComputer.DistinguishedName.Split(",")[-4]
			
			$localComputerAdminGroup = "{0} Administrators" -f $adComputer.Name
			
			$exemptADGroup = try
			{
				Get-ADGroup $localComputerAdminGroup -ErrorAction Stop -Server $ComputerDomainName
			}
			catch { $_ }
			if ($exemptADGroup.Name)
			{
				try
				{
					if (Get-ADGroupMember $localComputerAdminGroup -ErrorAction Stop -Server $ComputerDomainName | Where-Object { $_.SamAccountName -eq $adUser.SamAccountName })
					{
						$exemptADGroup | Remove-ADGroupMember -Members $adUser -Confirm:$false -ErrorAction Stop
						 $("Removed {0} from AD group `"{1}`"`n" -f $adUser.Name, $exemptADGroup.Name)
					}
					else
					{
						 $("User {0} not found in AD group `"{1}`"`n" -f $adUser.Name, $exemptADGroup.Name)
					}
				}
				catch
				{
					$_
				}
			}
			else
			{
				 $("`"{0}`" is not found in {1}`n" -f $localComputerAdminGroup, $CBU)
			}
		}
	}
	
	function Search-ComputerAdministratorsGroupMember
	{
		[CmdletBinding(DefaultParameterSetName = 'Main',
					   SupportsShouldProcess = $true,
					   ConfirmImpact = 'Medium')]
		[Alias()]
		[OutputType([String])]
		Param
		(
			# Param1 help description
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   Position = 0,
					   ParameterSetName = 'Main')]
			[string]$ComputerName,
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   Position = 1,
					   ParameterSetName = 'Main')]
			[string]$UserName
		)
		
		Process
		{
			$adComputer = Try
			{
				$ComputerDomainName = "hke.local"
				Get-ADComputer -Identity $ComputerName -ErrorAction Stop -Server $ComputerDomainName
				
			}
			catch
			{
				try
				{
					$ComputerDomainName = "hmf.hke.local"
					Get-ADComputer -Identity $ComputerName -ErrorAction Stop -Server $ComputerDomainName
				}
				catch
				{
					$_; return
				}
			}
			if ($adComputer.Name)
			{
				 $("Found Computer AD Account: {0}`n" -f $adComputer.Name)
			}
			
			$adUser = try
			{
				$UserDomainName = "hke.local"
				Get-ADUser -Identity $UserName -ErrorAction Stop -Server $UserDomainName
			}
			catch
			{
				try
				{
					$UserDomainName = "hmf.hke.local"
					Get-ADUser -Identity $UserName -ErrorAction Stop -Server $UserDomainName
				}
				catch
				{
					$_; return
				}
			}
			
			if ($adUser.Name)
			{
				 $("Found User AD Account: {0}`n" -f $adUser.Name)
			}
			$CBU = $adComputer.DistinguishedName.Split(",")[-4]
			
			$localComputerAdminGroup = "{0} Administrators" -f $adComputer.Name
			
			$enableGPOGroup = Get-ADGroup -Identity 'Enable GPO - HKE Local Admin - Computer' -Server $ComputerDomainName -ErrorAction Stop
			try
			{
				if (!($enableGPOGroup | Get-ADGroupMember | Where-Object{ $_.name -eq $adComputer.name }))
				{
					$("!!!Computer: {0} not found in: `"{1}`"`n" -f $adComputer.name, $enableGPOGroup.name)
				}
				
			}
			catch { $_ }
	
		
			
			$exemptADGroup = try
			{
				Get-ADGroup $localComputerAdminGroup -ErrorAction Stop -Server $ComputerDomainName
			}
			catch {  $("Group Not Found: `"{0}`" in {1}`n" -f $localComputerAdminGroup, $CBU) }
			if ($exemptADGroup.Name)
			{
				try
				{
					$groupMembers = Get-ADGroupMember $localComputerAdminGroup -ErrorAction Stop -Server $ComputerDomainName
					
					
					$foundUser = $groupMembers | Where-Object { $_.SamAccountName -eq $adUser.SamAccountName }
					if ($foundUser.name)
					{
						 $("Found Member: {0} in AD group `"{1}`"`n" -f $foundUser.name, $exemptADGroup.Name)
					}
					else {  $("{0} is not a member of AD group: `"{1}`"`n" -f $adUser.name, $exemptADGroup.Name) }
					
					$foundOtherUsers = $groupMembers | Where-Object { $_.SamAccountName -ne $adUser.SamAccountName }
					if ($foundOtherUsers)
					{
						$foundOtherUsers | ForEach-Object{  $("Found other Member: {0} of AD group: `"{1}`"`n" -f $_.Name, $exemptADGroup.Name) }
					}
					
				}
				catch
				{
					$_
				}
			}
			else
			{
				 $("`"{0}`" is not found in {1}`n" -f $localComputerAdminGroup, $CBU)
			}
			
		}
		
	}
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$AddUserLocalComputersAdminGroup = New-Object 'System.Windows.Forms.Form'
	$groupboxOutput = New-Object 'System.Windows.Forms.GroupBox'
	$richtextboxOutput = New-Object 'System.Windows.Forms.RichTextBox'
	$labelOutut = New-Object 'System.Windows.Forms.Label'
	$groupBoxInput = New-Object 'System.Windows.Forms.GroupBox'
	$lableComputerName = New-Object 'System.Windows.Forms.Label'
	$lableUserName = New-Object 'System.Windows.Forms.Label'
	$textboxComputerName = New-Object 'System.Windows.Forms.TextBox'
	$textboxUserName = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$buttonRemove = New-Object 'System.Windows.Forms.Button'
	$buttonAdd = New-Object 'System.Windows.Forms.Button'
	$menustripTheme = New-Object 'System.Windows.Forms.MenuStrip'
	$themeToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$darkToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$lightToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$errorproviderUserName = New-Object 'System.Windows.Forms.ErrorProvider'
	$errorproviderComputerName = New-Object 'System.Windows.Forms.ErrorProvider'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#Import-Module $ScriptDirectory\FunctionToCall.ps1
	$textboxComputerName.Text = $env:COMPUTERNAME
	$textboxUserName.Text = $env:USERNAME
	$AddUserLocalComputersAdminGroup_Load = {
	
		
		#TODO: Initialize Form Controls here
		$systemAppTheme = Get-ItemPropertyValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "AppsUseLightTheme"
		if ($systemAppTheme -eq 1)
		{
			Set-ControlTheme $AddUserLocalComputersAdminGroup -Theme Light
		}
		elseif ($systemAppTheme -eq 0) {
				Set-ControlTheme $AddUserLocalComputersAdminGroup -Theme Dark
			}
			else {
				Set-ControlTheme $AddUserLocalComputersAdminGroup -Theme Light
			}
		}
		
	$darkToolStripMenuItem_Click={
		#TODO: Place custom script here
		Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "AppsUseLightTheme" -Value 0
		Set-ControlTheme -Control $AddUserLocalComputersAdminGroup -Theme Dark
	
	}
	
	$lightToolStripMenuItem_Click = {
		Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "AppsUseLightTheme" -Value 1
		Set-ControlTheme -Control $AddUserLocalComputersAdminGroup -Theme Light
		
	}
	
	#region Control Theme Helper Function
	<#
		.SYNOPSIS
			Applies a theme to the control and its children.
		
		.PARAMETER Control
			The control to theme. Usually the form itself.
		
		.PARAMETER Theme
			The color theme:
			Light
			Dark
	
		.PARAMETER CustomColor
			A hashtable that contains the color values.
			Keys:
			WindowColor
			ContainerColor
			BackColor
			ForeColor
			BorderColor
			SelectionForeColor
			SelectionBackColor
			MenuSelectionColor
		.EXAMPLE
			PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
		
		.EXAMPLE
			PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
		.NOTES
			Created by SAPIEN Technologies, Inc.
	#>
	function Set-ControlTheme
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.ComponentModel.Component]$Control,
			[ValidateSet('Light', 'Dark')]
			[string]$Theme = 'Dark',
			[System.Collections.Hashtable]$CustomColor
		)
		
		$Font = [System.Drawing.Font]'Segoe UI, 9pt'
		
		#Initialize the colors
		if ($Theme -eq 'Dark')
		{
			$WindowColor = [System.Drawing.Color]'32, 32, 32'
			$ContainerColor = [System.Drawing.Color]'45, 45, 45'
			$BackColor = [System.Drawing.Color]'32, 32, 32'
			$ForeColor = [System.Drawing.Color]::White
			$BorderColor = [System.Drawing.Color]::DimGray
			$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
			$SelectionForeColor = [System.Drawing.Color]::White
			$MenuSelectionColor = [System.Drawing.Color]::DimGray
		}
		else
		{
			$WindowColor = [System.Drawing.Color]::White
			$ContainerColor = [System.Drawing.Color]::WhiteSmoke
			$BackColor = [System.Drawing.Color]::Gainsboro
			$ForeColor = [System.Drawing.Color]::Black
			$BorderColor = [System.Drawing.Color]::DimGray
			$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
			$SelectionForeColor = [System.Drawing.Color]::White
			$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
		}
		
		if ($CustomColor)
		{
			#Check and Validate the custom colors:
			$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
			if ($Color) { $WindowColor = $Color }
			$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
			if ($Color) { $ContainerColor = $Color }
			$Color = $CustomColor.BackColor -as [System.Drawing.Color]
			if ($Color) { $BackColor = $Color }
			$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
			if ($Color) { $ForeColor = $Color }
			$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
			if ($Color) { $BorderColor = $Color }
			$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
			if ($Color) { $SelectionBackColor = $Color }
			$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
			if ($Color) { $SelectionForeColor = $Color }
			$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
			if ($Color) { $MenuSelectionColor = $Color }
		}
		
		#Define the custom renderer for the menus
		#region Add-Type definition
		try
		{
			[SAPIENTypes.SAPIENColorTable] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies 'System.Windows.Forms', 'System.Drawing' -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
		}
		#endregion
		
		$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
		$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
		[System.Windows.Forms.ToolStripManager]::Renderer = $render
		
		#Set up our processing queue
		$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
		$Queue.Enqueue($Control)
		
		Add-Type -AssemblyName System.Core
		
		#Only process the controls once.
		$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
		
		#Apply the colors to the controls
		while ($Queue.Count -gt 0)
		{
			$target = $Queue.Dequeue()
			
			#Skip controls we already processed
			if ($Processed.Contains($target)) { continue }
			$Processed.Add($target)
			
			#Set the text color
			$target.ForeColor = $ForeColor
			
			#region Handle Controls
			if ($target -is [System.Windows.Forms.Form])
			{
				#Set Font
				$target.Font = $Font
				$target.BackColor = $ContainerColor
			}
			elseif ($target -is [System.Windows.Forms.SplitContainer])
			{
				$target.BackColor = $BorderColor
			}
			elseif ($target -is [System.Windows.Forms.PropertyGrid])
			{
				$target.BackColor = $BorderColor
				$target.ViewBackColor = $BackColor
				$target.ViewForeColor = $ForeColor
				$target.ViewBorderColor = $BorderColor
				$target.CategoryForeColor = $ForeColor
				$target.CategorySplitterColor = $ContainerColor
				$target.HelpBackColor = $BackColor
				$target.HelpForeColor = $ForeColor
				$target.HelpBorderColor = $BorderColor
				$target.CommandsBackColor = $BackColor
				$target.CommandsBorderColor = $BorderColor
				$target.CommandsForeColor = $ForeColor
				$target.LineColor = $ContainerColor
			}
			elseif ($target -is [System.Windows.Forms.ContainerControl] -or
				$target -is [System.Windows.Forms.Panel])
			{
				#Set the BackColor for the container
				$target.BackColor = $ContainerColor
				
			}
			elseif ($target -is [System.Windows.Forms.GroupBox])
			{
				$target.FlatStyle = 'Flat'
			}
			elseif ($target -is [System.Windows.Forms.Button])
			{
				$target.FlatStyle = 'Flat'
				$target.FlatAppearance.BorderColor = $BorderColor
				$target.BackColor = $BackColor
			}
			elseif ($target -is [System.Windows.Forms.CheckBox] -or
				$target -is [System.Windows.Forms.RadioButton] -or
				$target -is [System.Windows.Forms.Label])
			{
				#$target.FlatStyle = 'Flat'
			}
			elseif ($target -is [System.Windows.Forms.ComboBox])
			{
				$target.BackColor = $BackColor
				$target.FlatStyle = 'Flat'
			}
			elseif ($target -is [System.Windows.Forms.TextBox])
			{
				$target.BorderStyle = 'FixedSingle'
				$target.BackColor = $BackColor
			}
			elseif ($target -is [System.Windows.Forms.DataGridView])
			{
				$target.GridColor = $BorderColor
				$target.BackgroundColor = $ContainerColor
				$target.DefaultCellStyle.BackColor = $WindowColor
				$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
				$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
				$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
				$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
				$target.EnableHeadersVisualStyles = $false
				$target.ColumnHeadersBorderStyle = 'Single'
				$target.RowHeadersBorderStyle = 'Single'
				$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
				$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
				
			}
			elseif ($target -is [System.Windows.Forms.DataGrid])
			{
				$target.CaptionBackColor = $WindowColor
				$target.CaptionForeColor = $ForeColor
				$target.BackgroundColor = $ContainerColor
				$target.BackColor = $WindowColor
				$target.ForeColor = $ForeColor
				$target.HeaderBackColor = $ContainerColor
				$target.HeaderForeColor = $ForeColor
				$target.FlatMode = $true
				$target.BorderStyle = 'FixedSingle'
				$target.GridLineColor = $BorderColor
				$target.AlternatingBackColor = $ContainerColor
				$target.SelectionBackColor = $SelectionBackColor
				$target.SelectionForeColor = $SelectionForeColor
			}
			elseif ($target -is [System.Windows.Forms.ToolStrip])
			{
				
				$target.BackColor = $BackColor
				$target.Renderer = $render
				
				foreach ($item in $target.Items)
				{
					$Queue.Enqueue($item)
				}
			}
			elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
				$target -is [System.Windows.Forms.ToolStripDropDown] -or
				$target -is [System.Windows.Forms.ToolStripDropDownItem])
			{
				$target.BackColor = $BackColor
				foreach ($item in $target.DropDownItems)
				{
					$Queue.Enqueue($item)
				}
			}
			elseif ($target -is [System.Windows.Forms.ListBox] -or
				$target -is [System.Windows.Forms.ListView] -or
				$target -is [System.Windows.Forms.TreeView])
			{
				$target.BackColor = $WindowColor
			}
			else
			{
				$target.BackColor = $BackColor
			}
			#endregion
			
			if ($target -is [System.Windows.Forms.Control])
			{
				#Queue all the child controls
				foreach ($child in $target.Controls)
				{
					$Queue.Enqueue($child)
				}
			}
		}
	}
	#endregion
	
	$textboxComputerName_KeyUp = [System.Windows.Forms.KeyEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'Enter')
		{
			$textboxUserName.Focus()
		}
	}
	
	$textboxUserName_KeyUp = [System.Windows.Forms.KeyEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'Enter')
		{
			$buttonSearch.Focus()
		}
	}
	$buttonSearch_Click = {
		$richtextboxOutput.Text = "Search..."
		$richtextboxOutput.Text += "Please Wait"
		$richtextboxOutput.Text = Search-ComputerAdministratorsGroupMember -ComputerName $textboxComputerName.Text -UserName $textboxUserName.Text
	}
	
	$buttonAdd_Click = {
		$richtextboxOutput.Text = "Search..."
		$richtextboxOutput.Text += "Please Wait"
		
		$richtextboxOutput.Text = Add-ComputerAdministratorsGroupMember -ComputerName $textboxComputerName.Text -UserName $textboxUserName.Text
		
	}
	
	$buttonRemove_Click={
		$richtextboxOutput.Text = "Search..."
		$richtextboxOutput.Text += "Please Wait"
		
		$richtextboxOutput.Text = Remove-ComputerAdministratorsGroupMember -ComputerName $textboxComputerName.Text -UserName $textboxUserName.Text
	}
	
	
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$AddUserLocalComputersAdminGroup.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextboxOutput = $richtextboxOutput.Text
		$script:MainForm_textboxComputerName = $textboxComputerName.Text
		$script:MainForm_textboxUserName = $textboxUserName.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxComputerName.remove_KeyUp($textboxComputerName_KeyUp)
			$textboxUserName.remove_KeyUp($textboxUserName_KeyUp)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$buttonRemove.remove_Click($buttonRemove_Click)
			$buttonAdd.remove_Click($buttonAdd_Click)
			$AddUserLocalComputersAdminGroup.remove_Load($AddUserLocalComputersAdminGroup_Load)
			$darkToolStripMenuItem.remove_Click($darkToolStripMenuItem_Click)
			$lightToolStripMenuItem.remove_Click($lightToolStripMenuItem_Click)
			$AddUserLocalComputersAdminGroup.remove_Load($Form_StateCorrection_Load)
			$AddUserLocalComputersAdminGroup.remove_Closing($Form_StoreValues_Closing)
			$AddUserLocalComputersAdminGroup.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$AddUserLocalComputersAdminGroup.SuspendLayout()
	$groupboxOutput.SuspendLayout()
	$groupBoxInput.SuspendLayout()
	$menustripTheme.SuspendLayout()
	#
	# AddUserLocalComputersAdminGroup
	#
	$AddUserLocalComputersAdminGroup.Controls.Add($groupboxOutput)
	$AddUserLocalComputersAdminGroup.Controls.Add($groupBoxInput)
	$AddUserLocalComputersAdminGroup.Controls.Add($buttonSearch)
	$AddUserLocalComputersAdminGroup.Controls.Add($buttonRemove)
	$AddUserLocalComputersAdminGroup.Controls.Add($buttonAdd)
	$AddUserLocalComputersAdminGroup.Controls.Add($menustripTheme)
	$AddUserLocalComputersAdminGroup.AutoScaleDimensions = '6, 13'
	$AddUserLocalComputersAdminGroup.AutoScaleMode = 'Font'
	$AddUserLocalComputersAdminGroup.ClientSize = '604, 306'
	#region Binary Data
	$AddUserLocalComputersAdminGroup.Icon = [System.Convert]::FromBase64String('
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
u7z/D4srcoIy5GH4AAAAAElFTkSuQmCC')
	#endregion
	$AddUserLocalComputersAdminGroup.Margin = '4, 4, 4, 4'
	$AddUserLocalComputersAdminGroup.MinimumSize = '450, 45'
	$AddUserLocalComputersAdminGroup.Name = 'AddUserLocalComputersAdminGroup'
	$AddUserLocalComputersAdminGroup.SizeGripStyle = 'Hide'
	$AddUserLocalComputersAdminGroup.StartPosition = 'CenterScreen'
	$AddUserLocalComputersAdminGroup.Text = 'Add User Local Computer''s AD Admin Group'
	$AddUserLocalComputersAdminGroup.add_Load($AddUserLocalComputersAdminGroup_Load)
	#
	# groupboxOutput
	#
	$groupboxOutput.Controls.Add($richtextboxOutput)
	$groupboxOutput.Controls.Add($labelOutut)
	$groupboxOutput.Location = '10, 126'
	$groupboxOutput.Name = 'groupboxOutput'
	$groupboxOutput.Size = '582, 144'
	$groupboxOutput.TabIndex = 28
	$groupboxOutput.TabStop = $False
	$groupboxOutput.UseCompatibleTextRendering = $True
	#
	# richtextboxOutput
	#
	$richtextboxOutput.Location = '52, 19'
	$richtextboxOutput.Name = 'richtextboxOutput'
	$richtextboxOutput.ReadOnly = $True
	$richtextboxOutput.Size = '524, 92'
	$richtextboxOutput.TabIndex = 26
	$richtextboxOutput.TabStop = $False
	$richtextboxOutput.Text = ''
	#
	# labelOutut
	#
	$labelOutut.AutoSize = $True
	$labelOutut.Location = '7, 15'
	$labelOutut.Name = 'labelOutut'
	$labelOutut.Size = '41, 17'
	$labelOutut.TabIndex = 23
	$labelOutut.Text = 'Output '
	$labelOutut.UseCompatibleTextRendering = $True
	#
	# groupBoxInput
	#
	$groupBoxInput.Controls.Add($lableComputerName)
	$groupBoxInput.Controls.Add($lableUserName)
	$groupBoxInput.Controls.Add($textboxComputerName)
	$groupBoxInput.Controls.Add($textboxUserName)
	$groupBoxInput.Location = '10, 26'
	$groupBoxInput.Name = 'groupBoxInput'
	$groupBoxInput.Size = '582, 94'
	$groupBoxInput.TabIndex = 27
	$groupBoxInput.TabStop = $False
	$groupBoxInput.UseCompatibleTextRendering = $True
	#
	# lableComputerName
	#
	$lableComputerName.AutoSize = $True
	$lableComputerName.Location = '68, 24'
	$lableComputerName.Name = 'lableComputerName'
	$lableComputerName.Size = '90, 17'
	$lableComputerName.TabIndex = 18
	$lableComputerName.Text = 'Computer Name:'
	$lableComputerName.UseCompatibleTextRendering = $True
	#
	# lableUserName
	#
	$lableUserName.AutoSize = $True
	$lableUserName.Location = '68, 50'
	$lableUserName.Name = 'lableUserName'
	$lableUserName.Size = '64, 17'
	$lableUserName.TabIndex = 19
	$lableUserName.Text = 'User Name:'
	$lableUserName.UseCompatibleTextRendering = $True
	#
	# textboxComputerName
	#
	$textboxComputerName.Location = '164, 21'
	$textboxComputerName.Name = 'textboxComputerName'
	$textboxComputerName.Size = '300, 20'
	$textboxComputerName.TabIndex = 1
	$textboxComputerName.add_KeyUp($textboxComputerName_KeyUp)
	#
	# textboxUserName
	#
	$textboxUserName.Location = '164, 47'
	$textboxUserName.Name = 'textboxUserName'
	$textboxUserName.Size = '300, 20'
	$textboxUserName.TabIndex = 2
	$textboxUserName.add_KeyUp($textboxUserName_KeyUp)
	#
	# buttonSearch
	#
	$buttonSearch.Location = '172, 276'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 3
	$buttonSearch.Text = 'Search'
	$buttonSearch.UseCompatibleTextRendering = $True
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# buttonRemove
	#
	$buttonRemove.Location = '91, 276'
	$buttonRemove.Name = 'buttonRemove'
	$buttonRemove.Size = '75, 23'
	$buttonRemove.TabIndex = 5
	$buttonRemove.Text = 'Remove'
	$buttonRemove.UseCompatibleTextRendering = $True
	$buttonRemove.UseVisualStyleBackColor = $True
	$buttonRemove.add_Click($buttonRemove_Click)
	#
	# buttonAdd
	#
	$buttonAdd.Location = '10, 276'
	$buttonAdd.Name = 'buttonAdd'
	$buttonAdd.Size = '75, 23'
	$buttonAdd.TabIndex = 4
	$buttonAdd.Text = 'Add'
	$buttonAdd.UseCompatibleTextRendering = $True
	$buttonAdd.UseVisualStyleBackColor = $True
	$buttonAdd.add_Click($buttonAdd_Click)
	#
	# menustripTheme
	#
	$menustripTheme.ImageScalingSize = '20, 20'
	[void]$menustripTheme.Items.Add($themeToolStripMenuItem)
	$menustripTheme.Location = '0, 0'
	$menustripTheme.Name = 'menustripTheme'
	$menustripTheme.Padding = '5, 2, 0, 2'
	$menustripTheme.ShowItemToolTips = $True
	$menustripTheme.Size = '604, 28'
	$menustripTheme.TabIndex = 14
	$menustripTheme.Text = 'menustrip1'
	#
	# themeToolStripMenuItem
	#
	$themeToolStripMenuItem.Alignment = 'Right'
	[void]$themeToolStripMenuItem.DropDownItems.Add($darkToolStripMenuItem)
	[void]$themeToolStripMenuItem.DropDownItems.Add($lightToolStripMenuItem)
	#region Binary Data
	$themeToolStripMenuItem.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMS41ZEdYUgAAAKpJREFU
OE9j+P//P0UYQqAB+6ptE+0qNv8A4v9Q/M2+ams/VBoOMAywq9zqiqQJF7aDKkc1AKjZGYtiHHiL
NaYBWBXixigGONTs6sWmCB8GhlMH3AAg5zs2RQTwO2QDsCkgiKlqAGVecKjd3Y9FAV5sX70dEYgU
RyMIAE0kPiFVbsVMSCBAlCGVW22hyjENgAGH2l0TgQH7AxQ7UPwdlNig0nAAN4B8/J8BAKJ1NNCa
6b0zAAAAAElFTkSuQmCC')
	#endregion
	$themeToolStripMenuItem.Name = 'themeToolStripMenuItem'
	$themeToolStripMenuItem.Size = '32, 24'
	$themeToolStripMenuItem.ToolTipText = 'Theme'
	#
	# darkToolStripMenuItem
	#
	$darkToolStripMenuItem.Name = 'darkToolStripMenuItem'
	$darkToolStripMenuItem.Size = '101, 22'
	$darkToolStripMenuItem.Text = 'Dark'
	$darkToolStripMenuItem.add_Click($darkToolStripMenuItem_Click)
	#
	# lightToolStripMenuItem
	#
	$lightToolStripMenuItem.Name = 'lightToolStripMenuItem'
	$lightToolStripMenuItem.Size = '101, 22'
	$lightToolStripMenuItem.Text = 'Light'
	$lightToolStripMenuItem.add_Click($lightToolStripMenuItem_Click)
	#
	# button1
	#
	$button1.Location = '0, 0'
	$button1.Name = 'button1'
	$button1.Size = '75, 23'
	$button1.TabIndex = 0
	$button1.UseCompatibleTextRendering = $True
	#
	# errorproviderUserName
	#
	$errorproviderUserName.ContainerControl = $AddUserLocalComputersAdminGroup
	#
	# errorproviderComputerName
	#
	$errorproviderComputerName.ContainerControl = $AddUserLocalComputersAdminGroup
	$menustripTheme.ResumeLayout()
	$groupBoxInput.ResumeLayout()
	$groupboxOutput.ResumeLayout()
	$AddUserLocalComputersAdminGroup.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $AddUserLocalComputersAdminGroup.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$AddUserLocalComputersAdminGroup.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$AddUserLocalComputersAdminGroup.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$AddUserLocalComputersAdminGroup.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $AddUserLocalComputersAdminGroup.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)
